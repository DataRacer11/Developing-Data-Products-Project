mod1 = lm(mpg ~ factor(am), data = mtcars)
mod2 = update(mod1, mpg ~ factor(am) + hp)
mod3 = update(mod2, mpg ~ factor(am) + hp + wt)
mod4 = update(mod3, mpg ~ factor(am) + hp + wt + carb)
the model.
anova(mod1, mod2, mod3, mod4)
summary(lm(mpg ~ factor(am) + hp + wt, data = mtcars))$coeff
d <- dist(as.matrix(mtcars))
hc <- hclust(d)
plot(hc)
am.glm = glm(formula=am ~ hp + wt,data=mtcars, family=binomial)
summary(am.glm)
auto <- “mtcars”[“mtcars”$am == "automatic", ]
manual <- “mtcars”[“mtcars”$am == "manual", ]
t.test(manual$mpg, auto$mpg ,alternative = "greater")
auto <- “mtcars”[“mtcars”$am == "automatic", ]
manual <- “mtcars”[“mtcars”$am == "manual", ]
data(mtcars)
auto <- “mtcars”[“mtcars”$am == "automatic", ]
manual <- “mtcars”[“mtcars”$am == "manual", ]
t.test(manual$mpg, auto$mpg ,alternative = "greater")
auto <- mtcars[mtcars$am == "automatic", ]
manual <- mtcars[mtcars$am == "manual", ]
t.test(manual$mpg, auto$mpg ,alternative = "greater")
auto <- mtcars[mtcars$am == "automatic", ...]
auto <- mtcars[mtcars$am == "automatic",]
manual <- mtcars[mtcars$am == "manual", ...]
manual <- mtcars[mtcars$am == "manual",]
t.test(manual$mpg, auto$mpg)
L = mtcars$am == 0
mpg.auto = mtcars[L,]$mpg
mpg.auto                    # automatic transmission mileage
mpg.manual = mtcars[!L,]$mpg
mpg.manual                  # manual transmission mileage
t.test(mpg.auto, mpg.manual)
library(ggplot2)
ggplot(mtcars, aes(y = mpg, x = wt, size = hp)) + geom_point() + stat_smooth(method = "lm", se = FALSE)
step_mod <- step(lm(data = mtcars, mpg~.), trace=0)
summary(step_mod)
library(mvoutlier)
outliers <-
aq.plot(mtcars[c("mpg","disp","hp","drat","wt","qsec")])
outliers # show list of outliers
outliers <- aq.plot(mtcars[c("mpg","disp","hp","drat","wt","qsec")])
outliers # show list of outliers
attach(mtcars)
qqnorm(mpg)
qqline(mpg)
library(HH)
hov(y~G, data=mydata)
hovPlot(y~G,data=mydata)
library("HH")
hov(y~G, data=mydata)
hovPlot(y~G,data=mydata)
library("HH")
hov(y~G, data=mtcars)
hovPlot(y~G,data=mtcars)
install.packages("HH")
library(HH)
hov(y~G, data=mtcars)
hovPlot(y~G,data=mtcars)
hov(y~mpg, data=mtcars)
hovPlot(y~mpg,data=mtcars)
hov(y~mpg.manual, data=mtcars)
hov(y~mpg, data=mtcars)
hovPlot(y~mpg,data=mtcars)
hov(mpg, data=mtcars)
hovPlot(mpg,data=mtcars)
hov(mpg,mtcars)
hovPlot(mpg,mtcars)
hov(mpg.manual,data=mtcars)
hov(mpg.manual,data=mpg)
data(mtcars)
hov(mpg.manual,data=mtcars)
hov(mpg.manual,mtcars)
hov(mpg.manual,data=mtcars)
hovPlot(mpg.manual,data=mtcars)
hov(mpg.manual~manual, data=mtcars)
hovPlot(mpg.manual~maual, data=mtcars)
hov(mpg.manual~manual, data=mtcars)
hovPlot(mpg.manual~manual, data=mtcars)
hov(mpg.manual~mpg, data=mtcars)
hov(mpg.manual ~ cars, data=mtcars)
hovPlot(mpg.manual ~ cars, data=mtcars)
hov(y~mpg, data=mtcars)
hovPlot(y~mpg, cars, data=mtcars)
cor(mtcars[, c(1, 2, 4, 6, 9, 10, 11)])
cor(hp,mpg)^2
cor(cyl,mpg)^2
cor(hp,mpg)^2
cor(cyl,mpg)^2
plot(hp,mpg,pch=cyl)
cor(hp,mpg)^2
cor(cyl,mpg)^2
plot(hp,mpg,pch=cyl)
legend(250,30,pch=c(4,6,8),
+ legend=c("4 cylinders","6 cylinders","8 cylinders"))
legend(250,30,pch=c(4,6,8),legend=c("4 cylinders","6 cylinders","8 cylinders"))
legend(250,30,pch=c(4,6,8),legend=c("4 cylinders","6 cylinders","8 cylinders"))
plot(hp,mpg,pch=cyl)
legend(250,30,pch=c(4,6,8),legend=c("4 cylinders","6 cylinders","8 cylinders"))
summary(lm(mpg ~ factor(am) + hp + wt, data = mtcars))$coeff
library(ggplot2)
ggplot(mtcars, aes(y = mpg, x = wt, size = hp)) + geom_point() + stat_smooth(method = "lm", se = FALSE)
step_mod <- step(lm(data = mtcars, mpg~.), trace=0)
summary(step_mod)
attach(mtcars)
qqnorm(mpg)
qqline(mpg)
lm.res = simple.lm(hp,mpg)
lm.resids = resid(lm.res)     # the residuals as a vector
plot(lm.resids)               # look for change in spread
hist(lm.resids)               # is data bell shaped?
qqnorm(lm.resids)             # is data on straight line?
lm.res = simple.lm(hp,mpg)
lm.resids = resid(lm.res)     # the residuals as a vector
plot(lm.resids)               # look for change in spread
hist(lm.resids)               # is data bell shaped?
qqnorm(lm.resids)             # is data on straight line?
am.glm = glm(formula=am ~ hp + wt,data=mtcars, family=binomial)
summary(am.glm)
d <- dist(as.matrix(mtcars))
hc <- hclust(d)
plot(hc)
lm.res = simple.lm(hp,mpg)
lm.resids = resid(lm.res)     # the residuals as a vector
plot(lm.resids)               # look for change in spread
hist(lm.resids)               # is data bell shaped?
source('C:/Users/Jacci/Desktop/Coursera/Regression Models/Final Regression V2.R')
source('C:/Users/Jacci/Desktop/Coursera/Regression Models/Final Regression V2.R')
data(mtcars)
plot(cyl, mpg)
plot(cyl, mpg)
data(mtcars)
stem(mpg,scale=3)
summary(mpg)
tapply(mpg,cyl,mean);
stem(mpg,scale=3)
summary(mpg)
tapply(mpg,cyl,mean);
source('C:/Users/Jacci/Desktop/Coursera/Regression Models/Final Regression V2.R')
source('C:/Users/Jacci/Desktop/Coursera/Regression Models/Final Regression V2.R')
stem(mpg,scale=3)
tapply(mpg,cyl,mean)
mtcars$cyl  <- factor(mtcars$cyl)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am   <- factor(mtcars$am,labels=c("Automatic","Manual"))
str(mtcars)
hist(mtcars$mpg, xlab="MPG", border="blue",  col="green", xlim=c(10,35), las=1, breaks=10)
qplot(mpg, wt, data=mtcars, size=cyl, colour=cyl);
qplot(factor(cyl), wt, data = mtcars, geom=c("boxplot", "jitter"))
boxplot(mpg ~ cyl, data=mtcars, notch=FALSE, col="red",
boxplot(mpg ~ cyl, data=mtcars, notch=FALSE, col="red",
xlab="Number of Cylinders", ylab="Miles per Gallon")
qplot(factor(cyl), wt, data = mtcars, geom=c("boxplot", "jitter"))
boxplot(mpg ~ cyl, data=mtcars, notch=FALSE, col="red",
boxplot(mpg ~ cyl, data=mtcars, notch=FALSE, col="red", +
xlab="Number of Cylinders", ylab="Miles per Gallon")
boxplot(mpg ~ cyl, data=mtcars, notch=FALSE, col="red",
+ xlab="Number of Cylinders", ylab="Miles per Gallon")
qplot(factor(cyl), wt, data = mtcars, geom=c("boxplot", "jitter"))
boxplot(mpg ~ cyl, data=mtcars, notch=FALSE, col="red", xlab="Number of Cylinders", ylab="Miles per Gallon")
qplot(factor(cyl), wt, data = mtcars, geom=c("boxplot", "jitter"))
boxplot(mpg ~ cyl, data=mtcars, notch=FALSE, col="red", xlab="Number of Cylinders", ylab="Miles per Gallon")
ggplot(mtcars, aes(wt, mpg)) +
geom_point(aes(colour=factor(cyl), size = qsec))
mod <- lm(mpg ~ wt, data=mtcars); qplot(resid(mod),fitted(mod))
source('C:/Users/Jacci/Desktop/Coursera/Regression Models/Final Regression V2.R')
plot(cyl, mpg)
barplot(table(cyl))
stem(mpg,scale=3)
summary(mpg)
tapply(mpg,cyl,mean)
detach(mtcars)
source('C:/Users/Jacci/Desktop/Coursera/Regression Models/Final Regression V2.R')
tapply(mpg,cyl,mean)
mtcars$cyl  <- factor(mtcars$cyl)
###Executive Summary
plot(cyl, mpg)
barplot(table(cyl))
hist(mtcars$mpg, xlab="MPG", border="blue", col="green", xlim=c(10,35), las=1, breaks=10)
hist(mtcars$mpg, xlab="MPG", border="blue", col="green", xlim=c(10,35), las=1, breaks=10)
qplot(mpg, wt, data=mtcars, size=cyl, colour=cyl)
qplot(factor(cyl), wt, data = mtcars, geom=c("boxplot", "jitter"))
boxplot(mpg ~ cyl, data=mtcars, notch=FALSE, col="red", xlab="Number of Cylinders", ylab="Miles per Gallon")
ggplot(mtcars, aes(wt, mpg)) +
geom_point(aes(colour=factor(cyl), size = qsec))
mod <- lm(mpg ~ wt, data=mtcars)
qplot(resid(mod),fitted(mod))
plot(hp,mpg,pch=cyl)
legend(250,30,pch=c(4,6,8),legend=c("4 cylinders","6 cylinders","8 cylinders"))
plot(mtcars$mpg, mtcars$hp)
plot(mtcars$mpg, mtcars$wt)
boxplot(mpg ~ am, data = mtcars)
boxplot(mpg ~ carb, data = mtcars)
plot(mtcars$mpg, mtcars$hp)
plot(mtcars$mpg, mtcars$wt)
boxplot(mpg ~ am, data = mtcars)
boxplot(mpg ~ carb, data = mtcars)
plot(mtcars$mpg, mtcars$hp)
plot(mtcars$mpg, mtcars$hp)
plot(mtcars$mpg, mtcars$wt)
boxplot(mpg ~ am, data = mtcars)
boxplot(mpg ~ carb, data = mtcars)
boxplot(mpg ~ carb, data = mtcars)
boxplot(mpg ~ am, data = mtcars)
mod1 = lm(mpg ~ factor(am), data = mtcars)
mod2 = update(mod1, mpg ~ factor(am) + hp)
mod3 = update(mod2, mpg ~ factor(am) + hp + wt)
mod4 = update(mod3, mpg ~ factor(am) + hp + wt + carb)
#The ANOVA test is performed to determine if the extra variable should be added in the model.
anova(mod1, mod2, mod3, mod4)
d <- dist(as.matrix(mtcars))
# find distance matrix
hc <- hclust(d)
# apply hierarchical clustering
plot(hc)
# plot the dendrogram
am.glm = glm(formula=am ~ hp + wt,data=mtcars, family=binomial)
#Print the summary of the generalized linear model and check for the #p-values of #the hp and wt variables.
summary(am.glm)
data(mtcars)
auto <- mtcars[mtcars$am == "automatic",]
manual <- mtcars[mtcars$am == "manual",]
L = mtcars$am == 0
mpg.auto = mtcars[L,]$mpg
mpg.auto             # automatic transmission mileage
mpg.manual = mtcars[!L,]$mpg
mpg.manual           # manual transmission mileage
t.test(mpg.auto, mpg.manual)
library(ggplot2)
ggplot(mtcars, aes(y = mpg, x = wt, size = hp)) + geom_point() + stat_smooth(method = "lm", se = FALSE)
step_mod <- step(lm(data = mtcars, mpg~.), trace=0)
summary(step_mod)
attach(mtcars)
qqnorm(mpg)
qqline(mpg)
lm.res = simple.lm(hp,mpg)
lm.resids = resid(lm.res) # the residuals as a vector
plot(lm.resids)   # look for change in spread
hist(lm.resids)   # is data bell shaped?
qqnorm(lm.resids) # is data on straight line?
source('C:/Users/Jacci/Desktop/Coursera/Regression Models/Regression Model 3_50am v2.R')
source('C:/Users/Jacci/Desktop/Coursera/Regression Models/blah.R')
source('C:/Users/Jacci/Desktop/Coursera/Regression Models/Final Regression V2.R')
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(IL, method='pca', thresh=0.8,
outcome=training$diagnosis)
IL
preProc
ls()
rm(list=ls())
install.packages("ElemStatLearn")
install.packages(c("pgmm:", "v1.1"))
install.packages(c("rpart:", "v4.1.8"))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
olive
str(olive)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
data <- segmentationOriginal
set.seed(125)
inTrain <- data$Case == "Train"
trainData <- data[inTrain, ]
testData <- data[!inTrain, ]
cartModel <- train(Class ~ ., data=trainData, method="rpart")
cartModel$finalModel
cartModel <- train(Class ~ ., data=trainData, method="rpart")
cartModel$finalModel
install.packages("e1071")
cartModel <- train(Class ~ ., data=trainData, method="rpart")
cartModel$finalModel
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
newdata
tModel <- train(Area ~ ., data=olive, method="rpart2")
tModel
predict(tModel, newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
sClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
set.seed(13234)
logRegModel <- train(chd ~ age + alcohol + obesity + tobacco +
typea + ldl, data=trainSA, method="glm",
family="binomial")
logRegModel
misClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predictTrain <- predict(logRegModel, trainSA)
predictTest <- predict(logRegModel, testSA)
misClass(trainSA$chd, predictTrain)
misClass(testSA$chd, predictTest)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(randomForest)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
model <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(model), decreasing=T)
ls ()
ls()
rm(list = ls())
ls()
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rcharts)
load(rCharts)
load(rcharts)
install.packages("rcharts")
install.packages("devtools")
install.packages('base64enc')
library(rCharts)
install.packages("rCharts")
dTable(airquality, sPaginationType = "full_numbers")
install.packages("R.utils")
install.packages('rCharts')
install.packages("devtools")
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
install.packages("Rcpp")
install_github('rCharts')
dTable(airquality, sPaginationType = "full_numbers")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'), # Missing a comma in the sidebar panel
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'), # Missing a comma in the sidebar panel
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'), # Missing a comma in the sidebar panel
h3('Sidebar'),
),
mainPanel(
h3('Main Panel text')
)
))
install.packages("shinyUI")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'), # Missing a comma in the sidebar panel
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
install.packages("shiny")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'), # Missing a comma in the sidebar panel
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'), # Missing a comma in the sidebar panel
h3('Sidebar').
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'), # Missing a comma in the sidebar panel
h3('Sidebar'),
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
install.packages("shiny")
library(shiny)
install.packages("shiny")
runExample("01_hello")
runApp("app1")
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
))
source('~/.active-rstudio-document')
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$newHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
install.packages("installr") # install
setInternet2(TRUE)
installr::updateR() # updating R.
setwd("C:/Users/Jacci/Desktop/Coursera/DDP/Test/census-App")
